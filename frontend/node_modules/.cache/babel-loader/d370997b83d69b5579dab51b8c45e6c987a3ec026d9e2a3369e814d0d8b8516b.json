{"ast":null,"code":"import csrfFetch from \"./csrf\";\nconst RECEIVE_VENDORS = 'vendors/RECEIVE_VENDORS';\nconst RECEIVE_VENDOR = 'vendor/RECEIVE_VENDOR';\nconst RECEIVE_SERVICES = 'vendor/RECEIVE_SERVICES';\nconst recieveVendors = vendors => ({\n  type: RECEIVE_VENDORS,\n  vendors\n});\nconst recieveVendor = vendor => ({\n  type: RECEIVE_VENDOR,\n  vendor\n});\nconst recieveServices = services => ({\n  type: RECEIVE_SERVICES,\n  services\n});\nexport const fetchVendors = () => async dispatch => {\n  const res = await csrfFetch('/api/vendors');\n  if (res.ok) {\n    const data = await res.json();\n    dispatch(recieveVendors(data));\n  }\n};\nexport const fetchVendor = vendorId => async dispatch => {\n  const res = await csrfFetch(`/api/vendors/${vendorId}`);\n  if (res.ok) {\n    const data = await res.json();\n    dispatch(recieveVendor(data));\n  }\n};\nexport const fetchServices = vendorId => async dispatch => {\n  const res = await csrfFetch(`/api/vendors/${vendorId}/services`);\n  if (res.ok) {\n    const data = await res.json();\n    const keys = Object.values(data);\n    if (keys.length > 0) {\n      dispatch(recieveServices(data));\n    }\n  }\n};\nexport const findVendorByService = (state, serviceId) => {\n  return '';\n  const vendors = Object.values(state.vendors);\n  console.log(vendors);\n  for (let vendor of vendors) {\n    if (vendor.some(service => service.id === serviceId)) {\n      return vendor;\n    }\n  }\n  return '';\n};\nconst vendorsReducer = (state = {}, action) => {\n  let newState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_VENDORS:\n      const vendors = action.vendors;\n      return {\n        ...newState,\n        ...vendors\n      };\n    case RECEIVE_VENDOR:\n      return {\n        ...newState,\n        ...action.vendor\n      };\n    case RECEIVE_SERVICES:\n      const vendorId = Object.values(action.services)[0].vendorId;\n      if (!newState[vendorId]) {\n        newState[vendorId] = {}; // Ensure the vendor object exists\n      }\n      newState[vendorId].services = action.services;\n      return newState;\n    default:\n      return state;\n  }\n};\nexport default vendorsReducer;","map":{"version":3,"names":["csrfFetch","RECEIVE_VENDORS","RECEIVE_VENDOR","RECEIVE_SERVICES","recieveVendors","vendors","type","recieveVendor","vendor","recieveServices","services","fetchVendors","dispatch","res","ok","data","json","fetchVendor","vendorId","fetchServices","keys","Object","values","length","findVendorByService","state","serviceId","console","log","some","service","id","vendorsReducer","action","newState"],"sources":["/Users/spencerheywood/Documents/Servo/frontend/src/components/store/vendor.js"],"sourcesContent":["import csrfFetch from \"./csrf\";\n\nconst RECEIVE_VENDORS = 'vendors/RECEIVE_VENDORS'\nconst RECEIVE_VENDOR = 'vendor/RECEIVE_VENDOR'\nconst RECEIVE_SERVICES = 'vendor/RECEIVE_SERVICES'\n\nconst recieveVendors = vendors => ({\n    type: RECEIVE_VENDORS,\n    vendors\n})\n\nconst recieveVendor = vendor => ({\n    type: RECEIVE_VENDOR,\n    vendor\n})\n\nconst recieveServices = services => ({\n    type: RECEIVE_SERVICES,\n    services\n})\n\nexport const fetchVendors = () => async dispatch => {\n    const res = await csrfFetch('/api/vendors');\n    if(res.ok){\n        const data = await res.json()\n        dispatch(recieveVendors(data))\n    }\n}\n\nexport const fetchVendor = vendorId => async dispatch => {\n    const res = await csrfFetch(`/api/vendors/${vendorId}`);\n    if(res.ok){\n        const data = await res.json()\n        dispatch(recieveVendor(data))\n    }\n}\n\nexport const fetchServices = vendorId => async dispatch => {\n    const res = await csrfFetch(`/api/vendors/${vendorId}/services`)\n    if(res.ok){\n        const data = await res.json();\n        const keys = Object.values(data)\n        if(keys.length > 0){\n            dispatch(recieveServices(data))\n        }\n    }\n}\n\nexport const findVendorByService = (state, serviceId) =>{\n    return ''\n    const vendors = Object.values(state.vendors);\n    console.log(vendors)\n    for(let vendor of vendors){\n        if(vendor.some(service => service.id === serviceId)){\n            return vendor\n        }\n    }\n    return ''\n}\n\nconst vendorsReducer = (state = {}, action) => {\n    let newState = { ...state }\n    switch(action.type){\n        case RECEIVE_VENDORS:\n            const vendors = action.vendors;\n            return { ...newState, ...vendors};\n        case RECEIVE_VENDOR:\n            return { ...newState, ...action.vendor}\n        case RECEIVE_SERVICES:\n            const vendorId = Object.values(action.services)[0].vendorId\n            if (!newState[vendorId]) {\n                newState[vendorId] = {}; // Ensure the vendor object exists\n            }\n            newState[vendorId].services = action.services;\n            return newState\n        default: \n            return state;\n    }\n}\n\nexport default vendorsReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}