{"ast":null,"code":"import csrfFetch, { restoreCSRF } from \"./csrf\";\nimport { receiveErrors } from \"./errors\";\nconst SET_CURRENT_USER = 'session/SET_CURRENT_USER';\nconst REMOVE_CURRENT_USER = 'session/REMOVE_CURRENT_USER';\nconst storeCurrentUser = user => {\n  if (user) sessionStorage.setItem('currentUser', JSON.stringify(user.id));else sessionStorage.removeItem('currentUser');\n};\nexport const getActiveAddress = state => {\n  var _state$session, _state$session$user;\n  const addresses = (_state$session = state.session) !== null && _state$session !== void 0 && _state$session.user ? (_state$session$user = state.session.user) === null || _state$session$user === void 0 ? void 0 : _state$session$user.addresses : null;\n  if (addresses) {\n    return Object.values(addresses).find(address => address.default === true);\n  }\n};\nconst removeCurrentUser = () => {\n  sessionStorage.setItem('currentUser', null);\n};\nconst selectCurrentUser = state => state !== null && state !== void 0 && state.session ? state.session.user : null;\nexport const isLoggedIn = state => !!selectCurrentUser(state);\nexport const signUp = user => async dispatch => {\n  const res = await csrfFetch(`/api/users`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      user: user\n    })\n  });\n  if (res.ok) {\n    let data = await res.json();\n    dispatch({\n      type: SET_CURRENT_USER,\n      user: data.user\n    });\n    storeCurrentUser(data.user);\n  } else {\n    let data = await res.json();\n    dispatch(receiveErrors(data.errors));\n  }\n};\nexport const restoreSession = () => async dispatch => {\n  const res = await csrfFetch(`/api/session`);\n  const token = res.headers.get('X-CSRF-Token');\n  if (token) {\n    sessionStorage.setItem('X-CSRF-Token', token);\n  } else {\n    sessionStorage.removeItem('X-CSRF-Token');\n  }\n  const data = await res.json();\n  sessionStorage.setItem('currentUser', JSON.stringify(data.user));\n  dispatch({\n    type: SET_CURRENT_USER,\n    user: data.user\n  });\n};\nexport const signIn = ({\n  email,\n  password\n}) => async dispatch => {\n  const attemptSignIn = async (retryCount = 0) => {\n    const maxRetries = 1;\n    try {\n      const res = await csrfFetch(`/api/session`, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (res.ok) {\n        let data = await res.json();\n        dispatch({\n          type: SET_CURRENT_USER,\n          user: data.user\n        });\n        storeCurrentUser(data.user);\n      } else {\n        let data = await res.json();\n        if (data.errors.includes(\"Invalid Authenticity Token\") && retryCount < maxRetries) {\n          await restoreCSRF();\n          return attemptSignIn(retryCount + 1);\n        } else {\n          dispatch(receiveErrors(data.errors));\n        }\n      }\n    } catch (error) {\n      dispatch(receiveErrors({\n        errors: ['An unexpected error occurred.']\n      }));\n    }\n  };\n  return attemptSignIn();\n};\nexport const logout = () => async dispatch => {\n  const res = await csrfFetch(`/api/session`, {\n    method: 'DELETE'\n  });\n  if (res.ok) {\n    dispatch({\n      type: REMOVE_CURRENT_USER\n    });\n    removeCurrentUser();\n  } else {\n    window.location.reload();\n  }\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\nconst sessionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        user: action.user\n      };\n    case REMOVE_CURRENT_USER:\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","restoreCSRF","receiveErrors","SET_CURRENT_USER","REMOVE_CURRENT_USER","storeCurrentUser","user","sessionStorage","setItem","JSON","stringify","id","removeItem","getActiveAddress","state","_state$session","_state$session$user","addresses","session","Object","values","find","address","default","removeCurrentUser","selectCurrentUser","isLoggedIn","signUp","dispatch","res","headers","method","body","ok","data","json","type","errors","restoreSession","token","get","signIn","email","password","attemptSignIn","retryCount","maxRetries","includes","error","logout","window","location","reload","initialState","parse","getItem","sessionReducer","action"],"sources":["/Users/spencerheywood/Documents/Servo/frontend/src/components/store/session.js"],"sourcesContent":["import csrfFetch, { restoreCSRF } from \"./csrf\";\nimport { receiveErrors } from \"./errors\";\n\nconst SET_CURRENT_USER = 'session/SET_CURRENT_USER'\nconst REMOVE_CURRENT_USER = 'session/REMOVE_CURRENT_USER'\n\nconst storeCurrentUser = user => {\n    if(user)sessionStorage.setItem('currentUser', JSON.stringify(user.id));\n    else sessionStorage.removeItem('currentUser');\n}\n\nexport const getActiveAddress = (state) =>{\n    const addresses = state.session?.user ? state.session.user?.addresses : null\n    if(addresses){\n        return Object.values(addresses).find(address => address.default === true)\n    }\n}\n\nconst removeCurrentUser = () => {\n    sessionStorage.setItem('currentUser', null)\n}\n\nconst selectCurrentUser = state => state?.session ? state.session.user : null;\nexport const isLoggedIn = (state) => !!selectCurrentUser(state);\n\nexport const signUp = user => async dispatch =>{\n    const res = await csrfFetch(`/api/users`,{\n        headers: {'Content-Type': 'application/json'},\n        method: 'POST',\n        body: JSON.stringify({user: user})\n    })\n    if(res.ok){\n        let data = await res.json()\n        dispatch({type: SET_CURRENT_USER, user: data.user})\n        storeCurrentUser(data.user)\n    }else{\n        let data = await res.json();\n        dispatch(receiveErrors(data.errors))\n    }\n}\n\nexport const restoreSession = () => async dispatch => {\n    const res = await csrfFetch(`/api/session`)\n    const token = res.headers.get('X-CSRF-Token')\n\n    if(token){\n        sessionStorage.setItem('X-CSRF-Token', token)\n    }else{\n        sessionStorage.removeItem('X-CSRF-Token')\n    }\n    \n    const data = await res.json();\n    sessionStorage.setItem('currentUser', JSON.stringify(data.user))\n    dispatch({type: SET_CURRENT_USER, user: data.user})\n}\n\n\nexport const signIn = ({email, password}) => async dispatch =>{\n    const attemptSignIn = async (retryCount = 0) =>{\n        const maxRetries = 1\n        try{\n            const res = await csrfFetch(`/api/session`,{\n                headers: {'Content-Type': 'application/json'},\n                method: 'POST',\n                body: JSON.stringify({email, password})\n            })\n\n            if(res.ok){\n                let data = await res.json()\n                    dispatch({type: SET_CURRENT_USER, user: data.user})\n                    storeCurrentUser(data.user)\n            }else{\n                let data = await res.json();\n\n                if(data.errors.includes(\"Invalid Authenticity Token\") && retryCount < maxRetries){\n                    await restoreCSRF();\n                    return attemptSignIn(retryCount + 1)\n                }else{\n                    dispatch(receiveErrors(data.errors))\n                }\n            }\n        } catch (error) {\n            dispatch(receiveErrors({errors: ['An unexpected error occurred.']}))\n        }\n    }\n    return attemptSignIn();\n}\n\n\nexport const logout = () => async dispatch => {\n    const res = await csrfFetch(`/api/session`,{\n        method: 'DELETE'\n    })\n\n    if(res.ok){\n        dispatch({type: REMOVE_CURRENT_USER})\n        removeCurrentUser();\n    }else{\n        window.location.reload();\n    }\n}\n\nconst initialState  = {\n    user: JSON.parse(sessionStorage.getItem('currentUser'))\n}\n\nconst sessionReducer = (state = initialState, action) => {\n    switch(action.type){\n        case SET_CURRENT_USER:\n            return {...state, user: action.user};\n        case REMOVE_CURRENT_USER:\n            return {...state, user: null};\n        default:\n            return state;\n    }\n}\n\nexport default sessionReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}