c
DurationFormatter.format_duration((order.duration.to_f / 60).round(2))
order.duration
c
JSON.parse(order.options_snapshot).length
JSON.parse(order.options_snapshot)[0]
JSON.parse(order.options_snapshot).[0]
JSON.parse(order.options_snapshot)
order.options_snapshot
order
c
315 / 60
60 * 5
order.duration / 60
order.duration
c
booking_params
c
order.duration
exit
params
exit
params
exit
exot
quit
params
address_params
Address.find(14)
params
c
        params.deep_transform_keys!(&:underscore)
params
c
@user.errors.full_messages
c
params.deep_transform_keys!(&:underscore)
params
c
 @user.errors.full_messages
test
test = @user.update(user_params)
@user.update(user_params)
user_params
params
@user
c
@user.update
@user
exit
params
c
booking
c
payment_intent
c
payment_intent
c
payload
c
user_params
@user.email
c
calendar
calendar.update(api_integration: true)
calendar.update(api_integration: true_
calendar[:access_token].present?
calendar[:access_token]
calendar
c
current_user
@current_user
c
formatted_available_times
c
formatted_events
c
end_hour
start_hour
c
calendar
c
calendar.workday_start_time
calendar
c
end_hour
start_hour
start_day
num_days
exit
c
cc
c
gaps
c
gaps
c
gaps
c
gaps
c
gaps
c
events.first
formatted_events
days
c
formatted_events
c
formatted_events
c
event[:start_time]
event[:start_time[
event[start_time]
event
c
event
c
days
c
cc
c
cc
c
event_gap
c
disable breakpoints
c
(105/1440).to_d
(duration/1440).to_f
(duration/1440).to_float
105/1440
duration / 1440
duration
event_gap
event_end
event_start
n
c
event_gap
event_start
event_end
q
c
event_gap
c
event_gap
c
event_gap
c
event_start
event_end
event_gap
exit
(91/4)*24
91/4
(events[index + 1][:start_time] - event[:end_time]) * 24
(events[index + 1][:start_time] - event[:end_time]) *1440
(events[index + 1][:start_time] - event[:end_time])
event[:end_time]
events[index + 1][:start_time]
(events[index + 1][:start_time] - event[:end_time])
(events[index + 1][:start_time] - event[:end_time]).to_i
time_gap
exit
c
time_gap / 60
time_gap
exit
x
z
time_gap
exit
x
z
n
c
event[:end_time]
event
(event[:end_time] - event[:start_time]).to_f
event[:end_time] - event[:start_time]
event[:start_time]
time_gap
c
cc
c
time_gap
c
time_gap
c
event[:start_time]
event.start_time
event[start_time]
event
c
end_day
c
end_day
start_day
c
duration
c
end_days
start_days
c
today
c
today
c
response.items[0].event.location
first_event.location
first_event.event
first_event.event.location
first_event.event.description
first_event.description
first_event = response.items[0]
c
first_event.email
first_event
first_event = response.items[0].organizer
response.items[0]
response
responst
resoponse.items[0]
respons.items[0]
response
c
vendor.vendor_calendar
vendor
Vendor
Vendor.vendor_calendar
c
params
c
response
client.list_events
client
c
response[:clientSecret]
c
response[:clientSecret]
c
response[:clientSecret]
response.clientSecret
clientSecret
c
clientSecret
c
clientSecret
c
clientSecret
c
response.clientSecret
response
c
@user.stripe_customer_id
